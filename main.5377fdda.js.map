{"version":3,"sources":["scripts/main.js"],"names":["pageInputs","document","querySelectorAll","inputs","formatInputPlaceholder","inputName","firstLetter","toUpperCase","slice","toLowerCase","input","labelElement","createElement","classList","add","setAttribute","id","textContent","name","placeholder","parentNode","prepend"],"mappings":";AAAA,aAuBC,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,IAAA,CAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EArBD,IAAMA,EAAaC,SAASC,iBAAiB,SACvCC,EAAaH,EAAAA,GAEnB,SAASI,EAAuBC,GAIvBC,OAHaD,EAAU,GAAGE,cACbF,EAAUG,MAAM,GAAGC,cAKrBN,IAWnB,EAXmBA,EAAAA,EAAAA,GAWnB,IAX2B,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAjBO,IAAAA,EAAiB,EAAA,MACpBC,EAAeV,SAASW,cAAc,SAE5CD,EAAaE,UAAUC,IAAI,eAC3BH,EAAaI,aAAa,MAAOL,EAAMM,IAEvCL,EAAaM,YAAcP,EAAMQ,KAEjCR,EAAMS,YAAcf,EAAuBM,EAAMQ,MAEjDR,EAAMU,WAAWC,QAAQV,IAC1B,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA","file":"main.5377fdda.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst pageInputs = document.querySelectorAll('input');\nconst inputs = [...pageInputs];\n\nfunction formatInputPlaceholder(inputName) {\n  const firstLetter = inputName[0].toUpperCase();\n  const leftLetters = inputName.slice(1).toLowerCase();\n\n  return firstLetter + leftLetters;\n}\n\nfor (const input of inputs) {\n  const labelElement = document.createElement('label');\n\n  labelElement.classList.add('field-label');\n  labelElement.setAttribute('for', input.id);\n\n  labelElement.textContent = input.name;\n\n  input.placeholder = formatInputPlaceholder(input.name);\n\n  input.parentNode.prepend(labelElement);\n}\n"]}